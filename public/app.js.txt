/* Frontend for search & rendering
   - Superscript bracketed refs in Answer ([1] -> <sup>1</sup>, no leading space)
   - Additional Support with show more
   - References (renamed from Supporting Passages), numbered 1., 2., ...
   - Report Slides grid (static images from `visuals`)
   - Secondary Information (optional, from /web-extras)
*/

const $ = (sel, root=document) => root.querySelector(sel);
const $$ = (sel, root=document) => Array.from(root.querySelectorAll(sel));

const askBtn = $("#askBtn");
const statusEl = $("#status");
const answerBox = $("#answerBox");
const answerEl = $("#answer");
const kpiRow = $("#kpiRow");
const kpiCurrent = $("#kpiCurrent");
const kpiDelta = $("#kpiDelta");
const kpiNps = $("#kpiNps");

const supportBox = $("#supportBox");
const supportList = $("#supportList");
const supportMore = $("#supportMore");

const refsBox = $("#refsBox");
const refsEl = $("#refs");

const slidesBox = $("#slidesBox");
const slidesEl = $("#slides");

const secondaryBox = $("#secondaryBox");
const secondaryEl = $("#secondary");

function supifyRefs(text) {
  if (!text) return "";
  // place superscripts immediately after the last character before [n]
  return text.replace(/\s?\[(\d+)\]/g, (_, n) => `<sup>${n}</sup>`);
}

function cleanMeta(v) {
  if (!v) return "";
  // remove ISO timestamps
  return String(v).replace(/\d{4}-\d{2}-\d{2}T.*$/g, "").trim();
}

function asArray(maybe) {
  if (!maybe) return [];
  return Array.isArray(maybe) ? maybe : Object.values(maybe);
}

async function fetchJSON(url, opts={}) {
  const res = await fetch(url, opts);
  if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
  return res.json();
}

async function doSearch() {
  const clientId = $("#clientId").value.trim();
  const q = $("#question").value.trim();
  if (!q) return;

  statusEl.textContent = "Searching…";
  answerBox.style.display = "none";
  supportBox.style.display = "none";
  refsBox.style.display = "none";
  slidesBox.style.display = "none";
  secondaryBox.style.display = "none";

  try {
    const body = { clientId, userQuery: q, topK: 6 };
    const res = await fetch("/search", {
      method: "POST",
      headers: {
        "Content-Type":"application/json",
        "x-auth-token": (localStorage.getItem("AUTH_TOKEN") || "")
      },
      body: JSON.stringify(body)
    });
    const data = await res.json();

    // Answer (structured or raw)
    const structured = data.structured || {};
    const headline = structured.headline?.paragraph || data.answer || "";
    answerEl.innerHTML = supifyRefs(headline);
    answerBox.style.display = headline ? "block" : "none";

    // KPIs if present
    const kpi = structured.kpis || {};
    const hasAnyKpi = ["current","delta","nps"].some(k=>kpi[k]!=null);
    if (hasAnyKpi) {
      kpiCurrent.textContent = (kpi.current ?? "—");
      kpiDelta.textContent   = (kpi.delta ?? "—");
      kpiNps.textContent     = (kpi.nps ?? "—");
      kpiRow.classList.remove("hidden");
    } else {
      kpiRow.classList.add("hidden");
    }

    // Additional Support (bullets)
    const supporting = asArray(structured.supporting?.map?.(s => s.text) || structured.supporting || []);
    supportList.innerHTML = "";
    if (supporting.length) {
      const first = supporting.slice(0, 5);
      const rest  = supporting.slice(5);
      first.forEach(t => {
        const li = document.createElement("li");
        li.textContent = String(t || "").replace(/\.\s*$/,""); // no period at end
        supportList.appendChild(li);
      });
      if (rest.length) {
        supportMore.classList.remove("hidden");
        supportMore.onclick = () => {
          rest.forEach(t => {
            const li = document.createElement("li");
            li.textContent = String(t || "").replace(/\.\s*$/,"");
            supportList.appendChild(li);
          });
          supportMore.classList.add("hidden");
        };
      } else {
        supportMore.classList.add("hidden");
      }
      supportBox.style.display = "block";
    }

    // Report Slides (visuals)
    const visuals = asArray(data.visuals || []).filter(v => v && (v.url || v.imageUrl));
    slidesEl.innerHTML = "";
    if (visuals.length) {
      visuals.slice(0, 6).forEach((v, i) => {
        const imgUrl = v.url || v.imageUrl;
        const cap    = v.caption || v.title || "";
        const card = document.createElement("div");
        card.className = "slide";
        card.innerHTML = `
          <img src="${imgUrl}" alt="Slide ${i+1}" loading="lazy" />
          <div class="cap">${cap}</div>
        `;
        slidesEl.appendChild(card);
      });
      slidesBox.style.display = "block";
    }

    // References (renamed from Supporting Passages)
    const refs = asArray(data.references || data.citations || []);
    refsEl.innerHTML = "";
    if (refs.length) {
      refs.forEach((r, idx) => {
        const title = r.title || r.sourceTitle || r.heading || `Reference ${idx+1}`;
        const url = r.url || r.link || "#";
        const snippet = (r.snippet || r.text || "").toString().replace(/\s+/g," ").trim();
        const ref = document.createElement("div");
        ref.className = "ref";
        ref.innerHTML = `
          <h4>${idx+1}. ${title}</h4>
          ${snippet ? `<p class="small">${snippet}</p>` : ``}
          <div class="row" style="margin-top:6px">
            <a class="btn ghost" href="${url}" target="_blank" rel="noopener">Open source</a>
          </div>
        `;
        refsEl.appendChild(ref);
      });
      refsBox.style.display = "block";
    }

    // Secondary Information (optional; hides itself if backend route is absent)
    try {
      const extras = await fetchJSON(`/web-extras?q=${encodeURIComponent(q)}&max=5`);
      secondaryEl.innerHTML = "";
      extras.items?.slice(0,5).forEach(item => {
        const div = document.createElement("div");
        div.className = "item";
        div.style.marginBottom = "10px";
        div.innerHTML = `
          <h4>${item.title || "Result"}</h4>
          ${item.snippet ? `<p>${item.snippet}</p>` : ``}
          ${item.url ? `<div class="row" style="margin-top:6px"><a class="btn ghost" target="_blank" rel="noopener" href="${item.url}">Open source</a></div>` : ``}
        `;
        secondaryEl.appendChild(div);
      });
      if (secondaryEl.children.length) secondaryBox.style.display = "block";
    } catch { /* silently ignore if route not present */ }

    statusEl.textContent = "";
  } catch (e) {
    statusEl.textContent = "Error: " + e.message;
  }
}

askBtn?.addEventListener("click", doSearch);
$("#question")?.addEventListener("keydown", e => { if (e.key==="Enter" && (e.metaKey||e.ctrlKey)) doSearch(); });

$("#signOutBtn")?.addEventListener("click", (e)=>{
  e.preventDefault();
  localStorage.removeItem("AUTH_TOKEN");
  location.href="/";
});
